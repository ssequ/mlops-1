name: CI/CD ml-package 

on:
  push: 
    branches: [ '**' ]
    tags: ['v*.*.*']
    paths: 
      - 'ml-package/**'
      - '.github/workflows/ml-package.yml'
  pull_request: 
    branches: [ main ] 
    paths: 
      - 'ml-package/**'
      - '.github/workflows/ml-package.yml'

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11", "3.12"]

    defaults:
      run:
        working-directory: ./ml-package

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      uses: abatilo/actions-poetry@v3
      with:
        poetry-version: '2.1.1'  

    - name: Cache virtualenv
      uses: actions/cache@v4
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-

    - name: Install dependencies
      run: |
        poetry install --no-interaction

    - name: Lint with Ruff
      run: |
        poetry run ruff check . --output-format=github

    - name: Static type checking with mypy 
      run: |
        poetry run mypy src 

    - name: Static code analysis (security) with bandit
      run: |
        poetry run bandit -r src -c pyproject.toml

    - name: Test with pytest and generate coverage report
      run: |
        poetry run pytest --cov=.

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.python-version }} # Unique name per Python version
        path: ml-package/coverage.xml
        if-no-files-found: error
  build-and-release:
    needs: lint-and-test 
    if: startsWith(github.ref, 'refs/tags/v') 
    runs-on: ubuntu-latest
    permissions: write-all

    defaults:
      run:
        working-directory: ./ml-package

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
          fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11' 

    - name: Install Poetry
      uses: abatilo/actions-poetry@v3
      with:
        poetry-version: '2.1.1' 

    - name: Cache virtualenv for build
      uses: actions/cache@v4
      with:
        path: ./.venv 
        key: venv-${{ runner.os }}-3.11-${{ hashFiles('**/poetry.lock') }} 
        restore-keys: |
          venv-${{ runner.os }}-3.11-

    - name: Configure Poetry to create venv in project
      run: poetry config virtualenvs.in-project true

    - name: Install dependencies (including build extras if any)
      run: poetry install --no-interaction --sync 

    - name: Verify Git Tag matches pyproject.toml version
      run: |
        TAG_VERSION="${{ github.ref_name }}"
        PYPROJECT_VERSION=$(poetry version -s)

        echo "Git Tag: $TAG_VERSION"
        echo "pyproject.toml Version: v$PYPROJECT_VERSION"

        if [ "$TAG_VERSION" != "v$PYPROJECT_VERSION" ]; then
          echo "Error: Git tag '$TAG_VERSION' does not match pyproject.toml version 'v$PYPROJECT_VERSION'"
          exit 1
        else
          echo "Success: Git tag matches pyproject.toml version."
        fi
      shell: bash

    - name: Build package (wheel and sdist)
      run: poetry build

    - name: List built artifacts
      run: ls -l dist/

    - name: Create GitHub Release and Upload Assets
      uses: softprops/action-gh-release@v1 
      with:
        files: ml-package/dist/*
